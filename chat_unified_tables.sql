-- Remover tabelas antigas se existirem
DROP TABLE IF EXISTS public.chat_messages CASCADE;
DROP TABLE IF EXISTS public.chat_rooms CASCADE;

-- Tabela unificada para conversas (suporta doctor-doctor e doctor-patient)
CREATE TABLE public.conversations (
  id bigint generated by default as identity not null,
  participant_1_id bigint not null,
  participant_2_id bigint not null,
  created_at timestamp with time zone null default now(),
  last_message_at timestamp with time zone null default now(),
  last_message text null,
  last_message_sender_id bigint null,
  is_active boolean null default true,
  constraint conversations_pkey primary key (id),
  constraint conversations_participant_1_fkey foreign key (participant_1_id) references users (id) on delete cascade,
  constraint conversations_participant_2_fkey foreign key (participant_2_id) references users (id) on delete cascade,
  constraint conversations_unique_participants unique (participant_1_id, participant_2_id),
  constraint conversations_different_participants check (participant_1_id != participant_2_id)
) TABLESPACE pg_default;

-- Tabela para mensagens
CREATE TABLE public.messages (
  id bigint generated by default as identity not null,
  conversation_id bigint not null,
  sender_id bigint not null,
  content text not null,
  message_type text null default 'text',
  is_read boolean null default false,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint messages_pkey primary key (id),
  constraint messages_conversation_id_fkey foreign key (conversation_id) references conversations (id) on delete cascade,
  constraint messages_sender_id_fkey foreign key (sender_id) references users (id) on delete cascade
) TABLESPACE pg_default;

-- Índices para performance
CREATE INDEX IF NOT EXISTS idx_conversations_participant_1 ON public.conversations USING btree (participant_1_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_conversations_participant_2 ON public.conversations USING btree (participant_2_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_conversations_last_message_at ON public.conversations USING btree (last_message_at) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON public.messages USING btree (conversation_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_messages_sender_id ON public.messages USING btree (sender_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_messages_created_at ON public.messages USING btree (created_at) TABLESPACE pg_default;

-- Função para atualizar a última mensagem na conversa
CREATE OR REPLACE FUNCTION update_conversation_last_message()
RETURNS trigger AS $$
BEGIN
  UPDATE conversations
  SET 
    last_message_at = NEW.created_at,
    last_message = NEW.content,
    last_message_sender_id = NEW.sender_id
  WHERE id = NEW.conversation_id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para atualizar automaticamente a última mensagem
CREATE TRIGGER tr_update_conversation_last_message
  AFTER INSERT ON messages
  FOR EACH ROW
  EXECUTE FUNCTION update_conversation_last_message();

-- Função para garantir ordem consistente dos participantes
CREATE OR REPLACE FUNCTION normalize_conversation_participants(p1_id bigint, p2_id bigint)
RETURNS TABLE(participant_1 bigint, participant_2 bigint) AS $$
BEGIN
  IF p1_id < p2_id THEN
    RETURN QUERY SELECT p1_id, p2_id;
  ELSE
    RETURN QUERY SELECT p2_id, p1_id;
  END IF;
END;
$$ LANGUAGE plpgsql; 