create table public.diary_entries (
  id bigint generated by default as identity not null,
  title text not null,
  description text null,
  mood text null default 'normal'::text,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null,
  constraint diary_entries_pkey primary key (id)
) TABLESPACE pg_default;

-- Nova tabela para dados do smartwatch
create table public.smartwatch_data (
  id bigint generated by default as identity not null,
  user_id bigint null,
  device_name text null,
  device_brand text null,
  heart_rate integer null,
  steps integer null,
  calories integer null,
  distance decimal null,
  blood_oxygen integer null,
  body_temperature decimal null,
  blood_pressure_systolic integer null,
  blood_pressure_diastolic integer null,
  sleep_total_hours decimal null,
  sleep_deep_hours decimal null,
  sleep_light_hours decimal null,
  sleep_rem_hours decimal null,
  stress_level integer null,
  battery_level integer null,
  collected_at timestamp with time zone null default now(),
  created_at timestamp with time zone null default now(),
  constraint smartwatch_data_pkey primary key (id),
  constraint smartwatch_data_user_id_fkey foreign key (user_id) references users (id)
) TABLESPACE pg_default;

create index IF not exists idx_smartwatch_data_user_id on public.smartwatch_data using btree (user_id) TABLESPACE pg_default;
create index IF not exists idx_smartwatch_data_collected_at on public.smartwatch_data using btree (collected_at) TABLESPACE pg_default;

create table public.medication_confirmations (
  id bigint generated by default as identity not null,
  scheduled_time text not null,
  confirmation_date date not null,
  confirmation_time timestamp with time zone null default timezone ('utc'::text, now()),
  taken boolean not null default false,
  notes text null,
  created_at timestamp with time zone not null default timezone ('utc'::text, now()),
  user_id bigint null,
  pill_id integer not null,
  constraint medication_confirmations_pkey primary key (id),
  constraint medication_confirmations_pill_id_fkey foreign KEY (pill_id) references pills_warning (id),
  constraint medication_confirmations_user_id_fkey foreign KEY (user_id) references users (id)
) TABLESPACE pg_default;

create index IF not exists idx_medication_confirmations_date on public.medication_confirmations using btree (confirmation_date) TABLESPACE pg_default;

create table public.medication_schedule_times (
  id bigint generated by default as identity not null,
  scheduled_date date not null,
  scheduled_time time without time zone not null,
  complete_datetime timestamp with time zone not null,
  dosage text null,
  user_id bigint not null,
  pill_id integer not null,
  created_at timestamp with time zone not null default timezone ('utc'::text, now()),
  status text null default 'pending'::text,
  notes text null,
  constraint medication_schedule_times_pkey primary key (id),
  constraint medication_schedule_pill_fkey foreign KEY (pill_id) references pills_warning (id) on delete CASCADE,
  constraint medication_schedule_user_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_medication_schedule_user_id on public.medication_schedule_times using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_medication_schedule_date on public.medication_schedule_times using btree (scheduled_date) TABLESPACE pg_default;

create trigger tr_check_duplicate_medication_schedule BEFORE INSERT
or
update on medication_schedule_times for EACH row
execute FUNCTION check_duplicate_medication_schedule ();

create table public.pills_warning (
  id integer not null,
  user_id bigint not null,
  titulo text null,
  quantidade_comprimidos integer null,
  quantidade_comprimidos_por_vez integer null,
  intervalo_horas integer null,
  horario_fixo text null,
  data_inicio text null,
  data_fim text null,
  status character varying null,
  constraint pills_warning_pkey primary key (id)
) TABLESPACE pg_default;

create table public.users (
  fingerprintid text null,
  fullname text not null,
  name text not null,
  password text not null,
  phone text null,
  role text not null,
  email text null,
  id bigserial not null,
  pfpimg text null,
  constraint users_pkey primary key (id)
) TABLESPACE pg_default;

-- Tabela para doutores
create table public.doctors (
  id bigint generated by default as identity not null,
  user_id bigint not null,
  specialty text null,
  license_number text null,
  phone text null,
  email text null,
  experience_years integer null,
  bio text null,
  consultation_fee decimal null,
  rating decimal null default 0,
  is_available boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint doctors_pkey primary key (id),
  constraint doctors_user_id_fkey foreign key (user_id) references users (id) on delete cascade
) TABLESPACE pg_default;

-- Tabela para salas de chat entre usuário e doutor
create table public.chat_rooms (
  id bigint generated by default as identity not null,
  user_id bigint not null,
  doctor_id bigint not null,
  created_at timestamp with time zone null default now(),
  last_message_at timestamp with time zone null default now(),
  is_active boolean null default true,
  constraint chat_rooms_pkey primary key (id),
  constraint chat_rooms_user_id_fkey foreign key (user_id) references users (id) on delete cascade,
  constraint chat_rooms_doctor_id_fkey foreign key (doctor_id) references doctors (id) on delete cascade,
  constraint chat_rooms_unique_user_doctor unique (user_id, doctor_id)
) TABLESPACE pg_default;

-- Tabela para mensagens do chat
create table public.chat_messages (
  id bigint generated by default as identity not null,
  chat_room_id bigint not null,
  sender_id bigint not null,
  message text not null,
  message_type text null default 'text',
  is_read boolean null default false,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint chat_messages_pkey primary key (id),
  constraint chat_messages_chat_room_id_fkey foreign key (chat_room_id) references chat_rooms (id) on delete cascade,
  constraint chat_messages_sender_id_fkey foreign key (sender_id) references users (id) on delete cascade
) TABLESPACE pg_default;

-- Índices para otimizar as consultas
create index IF not exists idx_doctors_user_id on public.doctors using btree (user_id) TABLESPACE pg_default;
create index IF not exists idx_chat_rooms_user_id on public.chat_rooms using btree (user_id) TABLESPACE pg_default;
create index IF not exists idx_chat_rooms_doctor_id on public.chat_rooms using btree (doctor_id) TABLESPACE pg_default;
create index IF not exists idx_chat_messages_chat_room_id on public.chat_messages using btree (chat_room_id) TABLESPACE pg_default;
create index IF not exists idx_chat_messages_sender_id on public.chat_messages using btree (sender_id) TABLESPACE pg_default;
create index IF not exists idx_chat_messages_created_at on public.chat_messages using btree (created_at) TABLESPACE pg_default;

-- Função para atualizar o timestamp da última mensagem na sala de chat
create or replace function update_chat_room_last_message()
returns trigger as $$
begin
  update chat_rooms
  set last_message_at = new.created_at
  where id = new.chat_room_id;
  return new;
end;
$$ language plpgsql;

-- Trigger para atualizar automaticamente o timestamp da última mensagem
create trigger tr_update_chat_room_last_message
  after insert on chat_messages
  for each row
  execute function update_chat_room_last_message();